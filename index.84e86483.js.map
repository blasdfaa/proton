{"mappings":"AAAO,MCAMA,EAAiB,wJAMjBC,EACJ,UADIA,EAEJ,UCRIC,EAAkB,CAC7BC,EACAC,EAAI,UACJC,EAAYC,SAASC,UACrBC,EAAYF,SAASC,aAErB,MAAME,EAAYC,SAASC,cAAa,OAClCC,EAAcF,SAASC,cAAa,KACpCE,EAASH,SAASC,cAAa,iBAErCF,EAAUK,UAAUC,IAAG,wBACvBH,EAAYE,UAAUC,IAAG,gCACzBF,EAAOC,UAAUC,IAAG,WAAW,+BAE/BH,EAAYI,YAAcb,EAElBC,iBAEJS,EAAOG,YAAW,KAChBH,EAAKI,iBAAgB,QAAUZ,uBAGjCQ,EAAOG,YAAW,sBAClBH,EAAOI,iBAAgB,QAAUT,UAIrCC,EAAUS,YAAYN,GACtBH,EAAUS,YAAYL,GAEfJ,GC1BaU,OAAOC,WAET,MCNO,MACzB,MAAMC,EAAOX,SAASY,cAAa,QAC7BC,EAAeb,SAASY,cAAa,wBAE3CC,EAAaN,iBAAgB,SAAQ,KACnCI,EAAKP,UAAUU,OAAM,gBAEFH,EAAKP,UAAUW,SAAQ,gBAGxCF,EAAaG,aAAY,gBAAgB,QAEzCH,EAAaG,aAAY,gBAAgB,aDL7CC,GHNcjB,SAASkB,iBAAgB,gBAEjCC,SAASC,IACbA,EAAOb,iBAAgB,SAAWc,IAChCA,EAAEC,iBAEF,MAAMC,EAAOH,EAAOI,aAAY,QACjBxB,SAASY,cAAcW,GAE/BE,eAAc,CACnBC,SAAQ,SACRC,MAAK,UAEPC,QAAQC,UAAU,KAAM,KAAMN,SKLP,MAC3B,MAAMO,EAAc9B,SAASY,cAAa,kBACpCmB,EAAuB/B,SAASY,cAAa,6BAC7CoB,EAAehC,SAASY,cAAa,kCACrCqB,EAAajC,SAASY,cAAa,gCACnCsB,EAAqBlC,SAASY,cAAa,mCAC3CuB,EAAenC,SAASY,cAAa,wBAE3C,IAAIwB,EAAe,GAsBnBH,EAAW1B,iBAAgB,SAAWc,QACrBgB,EAAf,MAAMC,EAASjB,MAAAA,GAAS,QAATgB,EAAAhB,EAAGiB,cAAM,IAATD,OAAS,EAATA,EAAWE,MArBV,IAAIC,EAuBhBF,IAvBgBE,EAuBQF,GAvBEhD,EAAkBmD,KAAKC,OAAOF,GAAOG,gBAwBjEV,EAAWW,kBAAiB,4BAClBN,EAGYL,EAAXW,kBAAiB,IAF5BX,EAAWW,kBAAiB,8BAK9BX,EAAWY,oBAGbb,EAAazB,iBAAgB,SAAWc,QACxBgB,EAAd,MAAME,EAAQlB,MAAAA,GAAS,QAATgB,EAAAhB,EAAGiB,cAAM,IAATD,OAAS,EAATA,EAAWE,MAErBA,EAAMO,OJtDoB,IIuD5Bd,EAAaY,kBAAiB,+CACpBL,EAGVP,EAAaY,kBAAiB,IAF9BZ,EAAaY,kBAAiB,8BAKhCV,EAAmB5B,aAAkB0B,EAAaO,MAAMO,OAA1B,OAC9Bd,EAAaa,oBAGf,MAAME,EAAiBvD,EJjEa,oCImElCD,GAAuB,KAzCvBuC,EAAYlB,cAAa,yBAA0BoC,SACnDlB,EAAY1B,UAAU4C,OAAM,uBAE5BZ,EAAgBjB,SAAS8B,IACvBlB,EAAqBvB,YAAYyC,WAGnCd,EAAae,WAsCTC,EAAiB3D,EJtEa,iCIsEiCD,GAErE4C,EAAa5B,iBAAgB,UAAYc,IACvCA,EAAEC,iBAxDkB,WACbS,EAAqBqB,YAC1BhB,EAAgBiB,KAAKtB,EAAqBqB,YAC1CrB,EAAqBuB,YAAYvB,EAAqBqB,aAsDxDG,GAEAzB,EAAY1B,UAAUC,IAAG,2BAGvB0B,EAAqBvB,YAAYuC,GAClC,MAAQS,GACPzB,EAAqBvB,YAAY2C,QF1EvCM","sources":["src/js/anchor-scroll.js","src/js/const.js","src/js/alert-form-message.js","src/js/app.js","src/js/burger.js","src/js/feedback-form.js"],"sourcesContent":["export const anchorScrollInit = () => {\r\n  const links = document.querySelectorAll('a[href^=\"#\"]');\r\n\r\n  links.forEach((anchor) => {\r\n    anchor.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n\r\n      const hash = anchor.getAttribute('href');\r\n      const target = document.querySelector(hash);\r\n\r\n      target.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'start',\r\n      });\r\n      history.pushState(null, null, hash);\r\n    });\r\n  });\r\n};\r\n","export const EMAIL_VALID_REGEX =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nexport const MAX_LENGTH_MESSAGE = 500;\r\nexport const SUCCESS_FORM_MESSAGE_TEXT = 'Ваше сообщение успешно отправлено';\r\nexport const FAILURE_FORM_MESSAGE_TEXT = 'Не удалось отправить сообщение';\r\n\r\nexport const FormMessageType = {\r\n  FAILURE: 'failure',\r\n  SUCCESS: 'success',\r\n};\r\n","export const createAlertMessage = (\r\n  message,\r\n  type = 'success',\r\n  onSuccess = Function.prototype,\r\n  onFailure = Function.prototype,\r\n) => {\r\n  const container = document.createElement('div');\r\n  const messageText = document.createElement('p');\r\n  const button = document.createElement('button');\r\n\r\n  container.classList.add('feedback-form__alert');\r\n  messageText.classList.add('feedback-form__alert-message');\r\n  button.classList.add('btn-blue', 'feedback-form__alert-button');\r\n\r\n  messageText.textContent = message;\r\n\r\n  switch (type) {\r\n    case 'success':\r\n      button.textContent = 'ОК';\r\n      button.addEventListener('click', onSuccess);\r\n      break;\r\n    case 'failure':\r\n      button.textContent = 'Попробовать еще раз';\r\n      button.addEventListener('click', onFailure);\r\n      break;\r\n  }\r\n\r\n  container.appendChild(messageText);\r\n  container.appendChild(button);\r\n\r\n  return container;\r\n};\r\n","import { anchorScrollInit } from './anchor-scroll';\r\nimport { initMobileMenu } from './burger';\r\nimport { feedbackFormInit } from './feedback-form';\r\n\r\nconst viewportWidth = window.innerWidth;\r\n\r\nif (viewportWidth < 1200) {\r\n  initMobileMenu();\r\n}\r\n\r\nanchorScrollInit();\r\nfeedbackFormInit();\r\n","export const initMobileMenu = () => {\r\n  const page = document.querySelector('html');\r\n  const burgerButton = document.querySelector('.header-menu__toggle');\r\n\r\n  burgerButton.addEventListener('click', () => {\r\n    page.classList.toggle('js-menu-open');\r\n\r\n    const isMenuOpen = page.classList.contains('js-menu-open');\r\n\r\n    if (isMenuOpen) {\r\n      burgerButton.setAttribute('aria-expanded', 'true');\r\n    } else {\r\n      burgerButton.setAttribute('aria-expanded', 'false');\r\n    }\r\n  });\r\n};\r\n","import {\r\n  EMAIL_VALID_REGEX,\r\n  FAILURE_FORM_MESSAGE_TEXT,\r\n  FormMessageType,\r\n  MAX_LENGTH_MESSAGE,\r\n  SUCCESS_FORM_MESSAGE_TEXT,\r\n} from './const';\r\nimport { createAlertMessage } from './alert-form-message';\r\n\r\nexport const feedbackFormInit = () => {\r\n  const formSection = document.querySelector('.feedback-form');\r\n  const formSectionContainer = document.querySelector('.feedback-form .container');\r\n  const messageInput = document.querySelector('.feedback-form__field--message');\r\n  const emailInput = document.querySelector('.feedback-form__field--email');\r\n  const messageTextCounter = document.querySelector('.feedback-form__message-counter');\r\n  const feedbackForm = document.querySelector('.feedback-form__form');\r\n\r\n  let oldFormElements = [];\r\n\r\n  const isEmailValid = (email) => EMAIL_VALID_REGEX.test(String(email).toLowerCase());\r\n\r\n  const hideFormElements = () => {\r\n    while (formSectionContainer.firstChild) {\r\n      oldFormElements.push(formSectionContainer.firstChild);\r\n      formSectionContainer.removeChild(formSectionContainer.firstChild);\r\n    }\r\n  };\r\n\r\n  const showFormElements = () => {\r\n    formSection.querySelector('.feedback-form__alert').remove();\r\n    formSection.classList.remove('feedback-form--sent');\r\n\r\n    oldFormElements.forEach((item) => {\r\n      formSectionContainer.appendChild(item);\r\n    });\r\n\r\n    feedbackForm.reset();\r\n  };\r\n\r\n  emailInput.addEventListener('input', (e) => {\r\n    const target = e?.target?.value;\r\n\r\n    if (target && !isEmailValid(target)) {\r\n      emailInput.setCustomValidity('Введите правильный Email');\r\n    } else if (!target) {\r\n      emailInput.setCustomValidity('Поле не должно быть пустым');\r\n    } else {\r\n      emailInput.setCustomValidity('');\r\n    }\r\n\r\n    emailInput.reportValidity();\r\n  });\r\n\r\n  messageInput.addEventListener('input', (e) => {\r\n    const value = e?.target?.value;\r\n\r\n    if (value.length > MAX_LENGTH_MESSAGE) {\r\n      messageInput.setCustomValidity(`Количество символов не должно превышать ${MAX_LENGTH_MESSAGE}`);\r\n    } else if (!value) {\r\n      messageInput.setCustomValidity('Поле не должно быть пустым');\r\n    } else {\r\n      messageInput.setCustomValidity('');\r\n    }\r\n\r\n    messageTextCounter.textContent = `${+messageInput.value.length}/${MAX_LENGTH_MESSAGE}`;\r\n    messageInput.reportValidity();\r\n  });\r\n\r\n  const successMessage = createAlertMessage(\r\n    SUCCESS_FORM_MESSAGE_TEXT,\r\n    FormMessageType.SUCCESS,\r\n    () =>\r\n      showFormElements(),\r\n  );\r\n  const failureMessage = createAlertMessage(FAILURE_FORM_MESSAGE_TEXT, FormMessageType.FAILURE);\r\n\r\n  feedbackForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    hideFormElements();\r\n\r\n    formSection.classList.add('feedback-form--sent');\r\n\r\n    try {\r\n      formSectionContainer.appendChild(successMessage);\r\n    } catch (e) {\r\n      formSectionContainer.appendChild(failureMessage);\r\n    }\r\n  });\r\n};\r\n"],"names":["$5036622db34bedfa$export$36297dca978b20e6","$5036622db34bedfa$export$4acf637ad0d06c5a","$bc86c9caf6e0da68$export$9cc932ce80ba3c29","message","type","onSuccess","Function","prototype","onFailure","container","document","createElement","messageText","button","classList","add","textContent","addEventListener","appendChild","window","innerWidth","page","querySelector","burgerButton","toggle","contains","setAttribute","$98f41e1efc81550f$export$c824afb4e943fa48","querySelectorAll","forEach","anchor","e","preventDefault","hash","getAttribute","scrollIntoView","behavior","block","history","pushState","formSection","formSectionContainer","messageInput","emailInput","messageTextCounter","feedbackForm","oldFormElements","ref","target","value","email","test","String","toLowerCase","setCustomValidity","reportValidity","length","successMessage","remove","item","reset","failureMessage","firstChild","push","removeChild","hideFormElements","e1","$b4dfb3fc1fbf646d$export$e530486184d838d7"],"version":3,"file":"index.84e86483.js.map"}